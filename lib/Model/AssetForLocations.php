<?php
/**
 * AssetForLocations
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yext\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yext API
 *
 * 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yext\Client\Model;

use \ArrayAccess;

/**
 * AssetForLocations Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Yext\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AssetForLocations implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AssetForLocations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'label_ids' => 'string[]',
        'mapping_type' => 'string',
        'location_ids' => 'string[]',
        'folder_id' => 'string',
        'label_operator' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'label_ids' => 'labelIds',
        'mapping_type' => 'mappingType',
        'location_ids' => 'locationIds',
        'folder_id' => 'folderId',
        'label_operator' => 'labelOperator'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'label_ids' => 'setLabelIds',
        'mapping_type' => 'setMappingType',
        'location_ids' => 'setLocationIds',
        'folder_id' => 'setFolderId',
        'label_operator' => 'setLabelOperator'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'label_ids' => 'getLabelIds',
        'mapping_type' => 'getMappingType',
        'location_ids' => 'getLocationIds',
        'folder_id' => 'getFolderId',
        'label_operator' => 'getLabelOperator'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const LABEL_OPERATOR_AND = 'AND';
    const LABEL_OPERATOR_OR = 'OR';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLabelOperatorAllowableValues()
    {
        return [
            self::LABEL_OPERATOR_AND,
            self::LABEL_OPERATOR_OR,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['label_ids'] = isset($data['label_ids']) ? $data['label_ids'] : null;
        $this->container['mapping_type'] = isset($data['mapping_type']) ? $data['mapping_type'] : null;
        $this->container['location_ids'] = isset($data['location_ids']) ? $data['location_ids'] : null;
        $this->container['folder_id'] = isset($data['folder_id']) ? $data['folder_id'] : null;
        $this->container['label_operator'] = isset($data['label_operator']) ? $data['label_operator'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['mapping_type'] === null) {
            $invalid_properties[] = "'mapping_type' can't be null";
        }
        $allowed_values = ["AND", "OR"];
        if (!is_null($this->container['label_operator']) && !in_array($this->container['label_operator'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'label_operator', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['mapping_type'] === null) {
            return false;
        }
        $allowed_values = ["AND", "OR"];
        if (!is_null($this->container['label_operator']) && !in_array($this->container['label_operator'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets label_ids
     * @return string[]
     */
    public function getLabelIds()
    {
        return $this->container['label_ids'];
    }

    /**
     * Sets label_ids
     * @param string[] $label_ids The list of **external** label IDs.  **Optional - can only be set if mappingType = ``FOLDER`` or ``ALL_LOCATIONS``.**
     * @return $this
     */
    public function setLabelIds($label_ids)
    {
        $this->container['label_ids'] = $label_ids;

        return $this;
    }

    /**
     * Gets mapping_type
     * @return string
     */
    public function getMappingType()
    {
        return $this->container['mapping_type'];
    }

    /**
     * Sets mapping_type
     * @param string $mapping_type The type of asset to location mapping:  * ``NO_LOCATIONS``: Not available to any location. * ``ALL_LOCATIONS``: Available to all locations. * ``FOLDER``: Available to all locations in a specified folder. * ``LOCATIONS``: Available to a list of locations.
     * @return $this
     */
    public function setMappingType($mapping_type)
    {
        $this->container['mapping_type'] = $mapping_type;

        return $this;
    }

    /**
     * Gets location_ids
     * @return string[]
     */
    public function getLocationIds()
    {
        return $this->container['location_ids'];
    }

    /**
     * Sets location_ids
     * @param string[] $location_ids The list of **external** location IDs which this asset can be used for.  **Optional - can only be set if mappingType = ``LOCATIONS``.**
     * @return $this
     */
    public function setLocationIds($location_ids)
    {
        $this->container['location_ids'] = $location_ids;

        return $this;
    }

    /**
     * Gets folder_id
     * @return string
     */
    public function getFolderId()
    {
        return $this->container['folder_id'];
    }

    /**
     * Sets folder_id
     * @param string $folder_id The **external** folder ID for locations which this asset can be used for.  **Optional - can only be set if mappingType = ``FOLDER``.**
     * @return $this
     */
    public function setFolderId($folder_id)
    {
        $this->container['folder_id'] = $folder_id;

        return $this;
    }

    /**
     * Gets label_operator
     * @return string
     */
    public function getLabelOperator()
    {
        return $this->container['label_operator'];
    }

    /**
     * Sets label_operator
     * @param string $label_operator The operator on the list of label IDs - whether the list is any of (``OR``) or all of (``AND``).  **Optional - can only be set if mappingType = ``FOLDER`` or ``ALL_LOCATIONS``.**
     * @return $this
     */
    public function setLabelOperator($label_operator)
    {
        $allowed_values = array('AND', 'OR');
        if (!is_null($label_operator) && (!in_array($label_operator, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'label_operator', must be one of 'AND', 'OR'");
        }
        $this->container['label_operator'] = $label_operator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
