<?php
/**
 * Asset
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yext\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yext API
 *
 * 
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yext\Client\Model;

use \ArrayAccess;

/**
 * Asset Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Yext\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Asset implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Asset';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'video_url' => 'string',
        'description' => 'string',
        'for_locations' => '\Yext\Client\Model\AssetForLocations',
        'clickthrough_url' => 'string',
        'labels' => 'string[]',
        'photo_url' => 'string',
        'details' => 'string',
        'alternate_text' => 'string',
        'type' => 'string',
        'id' => 'string',
        'contents' => '\Yext\Client\Model\AssetTextContent[]',
        'name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'video_url' => 'videoUrl',
        'description' => 'description',
        'for_locations' => 'forLocations',
        'clickthrough_url' => 'clickthroughUrl',
        'labels' => 'labels',
        'photo_url' => 'photoUrl',
        'details' => 'details',
        'alternate_text' => 'alternateText',
        'type' => 'type',
        'id' => 'id',
        'contents' => 'contents',
        'name' => 'name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'video_url' => 'setVideoUrl',
        'description' => 'setDescription',
        'for_locations' => 'setForLocations',
        'clickthrough_url' => 'setClickthroughUrl',
        'labels' => 'setLabels',
        'photo_url' => 'setPhotoUrl',
        'details' => 'setDetails',
        'alternate_text' => 'setAlternateText',
        'type' => 'setType',
        'id' => 'setId',
        'contents' => 'setContents',
        'name' => 'setName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'video_url' => 'getVideoUrl',
        'description' => 'getDescription',
        'for_locations' => 'getForLocations',
        'clickthrough_url' => 'getClickthroughUrl',
        'labels' => 'getLabels',
        'photo_url' => 'getPhotoUrl',
        'details' => 'getDetails',
        'alternate_text' => 'getAlternateText',
        'type' => 'getType',
        'id' => 'getId',
        'contents' => 'getContents',
        'name' => 'getName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_TEXT = 'TEXT';
    const TYPE_PHOTO = 'PHOTO';
    const TYPE_VIDEO = 'VIDEO';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TEXT,
            self::TYPE_PHOTO,
            self::TYPE_VIDEO,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['video_url'] = isset($data['video_url']) ? $data['video_url'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['for_locations'] = isset($data['for_locations']) ? $data['for_locations'] : null;
        $this->container['clickthrough_url'] = isset($data['clickthrough_url']) ? $data['clickthrough_url'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['photo_url'] = isset($data['photo_url']) ? $data['photo_url'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['alternate_text'] = isset($data['alternate_text']) ? $data['alternate_text'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['contents'] = isset($data['contents']) ? $data['contents'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['video_url']) && (strlen($this->container['video_url']) > 255)) {
            $invalid_properties[] = "invalid value for 'video_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (strlen($this->container['description']) > 255)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['for_locations'] === null) {
            $invalid_properties[] = "'for_locations' can't be null";
        }
        if (!is_null($this->container['clickthrough_url']) && (strlen($this->container['clickthrough_url']) > 2048)) {
            $invalid_properties[] = "invalid value for 'clickthrough_url', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['details']) && (strlen($this->container['details']) > 4000)) {
            $invalid_properties[] = "invalid value for 'details', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['alternate_text']) && (strlen($this->container['alternate_text']) > 255)) {
            $invalid_properties[] = "invalid value for 'alternate_text', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ["TEXT", "PHOTO", "VIDEO"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['id']) && (strlen($this->container['id']) > 16)) {
            $invalid_properties[] = "invalid value for 'id', the character length must be smaller than or equal to 16.";
        }

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 100)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['video_url']) > 255) {
            return false;
        }
        if (strlen($this->container['description']) > 255) {
            return false;
        }
        if ($this->container['for_locations'] === null) {
            return false;
        }
        if (strlen($this->container['clickthrough_url']) > 2048) {
            return false;
        }
        if (strlen($this->container['details']) > 4000) {
            return false;
        }
        if (strlen($this->container['alternate_text']) > 255) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ["TEXT", "PHOTO", "VIDEO"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['id']) > 16) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 100) {
            return false;
        }
        return true;
    }


    /**
     * Gets video_url
     * @return string
     */
    public function getVideoUrl()
    {
        return $this->container['video_url'];
    }

    /**
     * Sets video_url
     * @param string $video_url URL to the YouTube video.  **Required - when asset type is ``VIDEO``. Must be a valid URL to a YouTube video. Cannot be updated once created.**
     * @return $this
     */
    public function setVideoUrl($video_url)
    {
        if (!is_null($video_url) && (strlen($video_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $video_url when calling Asset., must be smaller than or equal to 255.');
        }

        $this->container['video_url'] = $video_url;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Asset description.
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Asset., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets for_locations
     * @return \Yext\Client\Model\AssetForLocations
     */
    public function getForLocations()
    {
        return $this->container['for_locations'];
    }

    /**
     * Sets for_locations
     * @param \Yext\Client\Model\AssetForLocations $for_locations
     * @return $this
     */
    public function setForLocations($for_locations)
    {
        $this->container['for_locations'] = $for_locations;

        return $this;
    }

    /**
     * Gets clickthrough_url
     * @return string
     */
    public function getClickthroughUrl()
    {
        return $this->container['clickthrough_url'];
    }

    /**
     * Sets clickthrough_url
     * @param string $clickthrough_url Clickthrough URL.  **Optional - only valid when asset type is ``PHOTO``.**
     * @return $this
     */
    public function setClickthroughUrl($clickthrough_url)
    {
        if (!is_null($clickthrough_url) && (strlen($clickthrough_url) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $clickthrough_url when calling Asset., must be smaller than or equal to 2048.');
        }

        $this->container['clickthrough_url'] = $clickthrough_url;

        return $this;
    }

    /**
     * Gets labels
     * @return string[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     * @param string[] $labels List of text labels to apply to this Asset.
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets photo_url
     * @return string
     */
    public function getPhotoUrl()
    {
        return $this->container['photo_url'];
    }

    /**
     * Sets photo_url
     * @param string $photo_url URL to the photo asset.  **Required - when asset type is ``PHOTO``. Must be a valid URL to a photo asset. Cannot be updated once created.**
     * @return $this
     */
    public function setPhotoUrl($photo_url)
    {
        $this->container['photo_url'] = $photo_url;

        return $this;
    }

    /**
     * Gets details
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     * @param string $details Details text.  **Optional - only valid when asset type is ``PHOTO``.**
     * @return $this
     */
    public function setDetails($details)
    {
        if (!is_null($details) && (strlen($details) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $details when calling Asset., must be smaller than or equal to 4000.');
        }

        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets alternate_text
     * @return string
     */
    public function getAlternateText()
    {
        return $this->container['alternate_text'];
    }

    /**
     * Sets alternate_text
     * @param string $alternate_text Alternate text for accessibility purposes.  **Optional - only valid when asset type is ``PHOTO``.**
     * @return $this
     */
    public function setAlternateText($alternate_text)
    {
        if (!is_null($alternate_text) && (strlen($alternate_text) > 255)) {
            throw new \InvalidArgumentException('invalid length for $alternate_text when calling Asset., must be smaller than or equal to 255.');
        }

        $this->container['alternate_text'] = $alternate_text;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Asset type.
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('TEXT', 'PHOTO', 'VIDEO');
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'TEXT', 'PHOTO', 'VIDEO'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Primary key. Unique alphanumeric (Latin-1) ID assigned by the Yext.
     * @return $this
     */
    public function setId($id)
    {
        if (!is_null($id) && (strlen($id) > 16)) {
            throw new \InvalidArgumentException('invalid length for $id when calling Asset., must be smaller than or equal to 16.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets contents
     * @return \Yext\Client\Model\AssetTextContent[]
     */
    public function getContents()
    {
        return $this->container['contents'];
    }

    /**
     * Sets contents
     * @param \Yext\Client\Model\AssetTextContent[] $contents
     * @return $this
     */
    public function setContents($contents)
    {
        $this->container['contents'] = $contents;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Asset name.
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Asset., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Yext\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
